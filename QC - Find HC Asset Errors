'STATS GATHERING----------------------------------------------------------------------------------------------------
name_of_script = "BULK - HC Asset Panel Check.vbs"
start_time = timer

'LOADING FUNCTIONS LIBRARY FROM GITHUB REPOSITORY===========================================================================
IF IsEmpty(FuncLib_URL) = TRUE THEN	'Shouldn't load FuncLib if it already loaded once
	IF run_locally = FALSE or run_locally = "" THEN		'If the scripts are set to run locally, it skips this and uses an FSO below.
		IF use_master_branch = TRUE THEN			'If the default_directory is C:\DHS-MAXIS-Scripts\Script Files, you're probably a scriptwriter and should use the master branch.
			FuncLib_URL = "https://raw.githubusercontent.com/MN-Script-Team/BZS-FuncLib/master/MASTER%20FUNCTIONS%20LIBRARY.vbs"
		Else																		'Everyone else should use the release branch.
			FuncLib_URL = "https://raw.githubusercontent.com/MN-Script-Team/BZS-FuncLib/RELEASE/MASTER%20FUNCTIONS%20LIBRARY.vbs"
		End if
		SET req = CreateObject("Msxml2.XMLHttp.6.0")				'Creates an object to get a FuncLib_URL
		req.open "GET", FuncLib_URL, FALSE							'Attempts to open the FuncLib_URL
		req.send													'Sends request
		IF req.Status = 200 THEN									'200 means great success
			Set fso = CreateObject("Scripting.FileSystemObject")	'Creates an FSO
			Execute req.responseText								'Executes the script code
		ELSE														'Error message, tells user to try to reach github.com, otherwise instructs to contact Veronica with details (and stops script).
			MsgBox 	"Something has gone wrong. The code stored on GitHub was not able to be reached." & vbCr &_
					vbCr & _
					"Before contacting Veronica Cary, please check to make sure you can load the main page at www.GitHub.com." & vbCr &_
					vbCr & _
					"If you can reach GitHub.com, but this script still does not work, ask an alpha user to contact Veronica Cary and provide the following information:" & vbCr &_
					vbTab & "- The name of the script you are running." & vbCr &_
					vbTab & "- Whether or not the script is ""erroring out"" for any other users." & vbCr &_
					vbTab & "- The name and email for an employee from your IT department," & vbCr & _
					vbTab & vbTab & "responsible for network issues." & vbCr &_
					vbTab & "- The URL indicated below (a screenshot should suffice)." & vbCr &_
					vbCr & _
					"Veronica will work with your IT department to try and solve this issue, if needed." & vbCr &_
					vbCr &_
					"URL: " & FuncLib_URL
					script_end_procedure("Script ended due to error connecting to GitHub.")
		END IF
	ELSE
		FuncLib_URL = "C:\BZS-FuncLib\MASTER FUNCTIONS LIBRARY.vbs"
		Set run_another_script_fso = CreateObject("Scripting.FileSystemObject")
		Set fso_command = run_another_script_fso.OpenTextFile(FuncLib_URL)
		text_from_the_other_script = fso_command.ReadAll
		fso_command.Close
		Execute text_from_the_other_script
	END IF
END IF
'END FUNCTIONS LIBRARY BLOCK================================================================================================

'Required for statistical purposes==========================================================================================
STATS_counter = 1                          'sets the stats counter at one
STATS_manualtime = 13                      'manual run time in seconds
STATS_denomination = "C"       							'C is for each CASE
'END OF stats block==============================================================================================

'Defining classes-----------------------------
Class case_attributes 'This class holds case-specific data
	public case_number
	public HC_status
	public worker
	public magi_comp
END Class

review_date = #06/01/17#

'DIALOGS----------------------------------------------------------------------
BeginDialog targeted_HC_review_dialog, 0, 0, 226, 135, "Likely Asset Error Review Selection"
  EditBox 80, 5, 130, 15, worker_number
  CheckBox 10, 55, 150, 10, "Check here to run this query county-wide.", all_workers_check
  ButtonGroup ButtonPressed
    OkButton 105, 115, 50, 15
    CancelButton 160, 115, 50, 15
  Text 10, 10, 65, 10, "Worker(s) to check:"
  Text 10, 70, 210, 20, "NOTE: running queries county-wide can take a significant amount of time and resources. This should be done after hours."
  Text 10, 30, 210, 20, "Enter 7 digits of your workers' x1 numbers (ex: x######), separated by a comma."
  EditBox 90, 95, 25, 15, MAXIS_footer_month
  EditBox 130, 95, 25, 15, MAXIS_footer_year
  Text 120, 95, 10, 10, "/"
  Text 10, 100, 80, 10, "Footer month to review:"
EndDialog

BeginDialog cases_to_select_dialog, 0, 0, 176, 125, "Cases to Select"
  ButtonGroup ButtonPressed
    OkButton 30, 105, 50, 15
    CancelButton 85, 105, 50, 15
  Text 15, 10, 160, 20, "Cases to audit based on the total number of cases meeting selection criteria:  "
  EditBox 85, 35, 20, 15, cases_to_select
  EditBox 85, 55, 20, 15, caper_cases_to_select
  Text 50, 35, 30, 15, "Active:"
  Text 45, 55, 35, 20, "CAPER (Inactive):"
  Text 15, 80, 150, 20, "Note: reducing these numbers will reduce the overall accuracy of your case audit."
EndDialog




'DECLARE VARIABLES

'THE SCRIPT-------------------------------------------------------------------------

'Determining specific county for multicounty agencies...
get_county_code
'Connects to BlueZone
EMConnect ""

'Shows dialog
Dialog targeted_HC_review_dialog
If buttonpressed = cancel then stopscript


'Starting the query start time (for the query runtime at the end)
query_start_time = timer

'Checking for MAXIS
Call check_for_password(false)


'If all workers are selected, the script will go to REPT/USER, and load all of the workers into an array. Otherwise it'll create a single-object "array" just for simplicity of code.
If all_workers_check = checked then
	call create_array_of_all_active_x_numbers_in_county(worker_array, two_digit_county_code)
Else
	x1s_from_dialog = split(worker_number, ",")	'Splits the worker array based on commas

	'formatting array
	For each x1_number in x1s_from_dialog
		If worker_array = "" then
			worker_array = trim(x1_number)		'replaces worker_county_code if found in the typed x1 number
		Else
			worker_array = worker_array & ", " & trim(ucase(x1_number)) 'replaces worker_county_code if found in the typed x1 number
		End if
	Next

	'Split worker_array
	worker_array = split(worker_array, ", ")
End if

'Prepare the arrays and counters to begin case collection

	HC_count = 0
	DIM HC_active_array()


excel_row = 2
'MAXIS_footer_month = "04"
'MAXIS_footer_year = "17"
footer_month = MAXIS_footer_month
'First, we check REPT/ACTV.  Must be done on ACTIVE and CAPER checks'
For each worker in worker_array
	back_to_self	'Does this to prevent "ghosting" where the old info shows up on the new screen for some reason
	MAXIS_case_number = ""
	Call navigate_to_MAXIS_screen("rept", "revs")
	EMWriteScreen worker, 21, 6
	transmit
	EMReadScreen user_worker, 7, 21, 71		'
	EMReadScreen p_worker, 7, 21, 13
	IF user_worker = p_worker THEN PF7		'If the user is checking their own REPT/ACTV, the script will back up to page 1 of the REPT/ACTV

	'Skips workers with no info
	EMReadScreen has_content_check, 1, 7, 8
	If has_content_check <> " " then

		'Grabbing each case number on screen
		Do
			'Set variable for next do...loop
			MAXIS_row = 7

			'Checking for the last page of cases.
			EMReadScreen last_page_check, 21, 24, 2	'because on REPT/ACTV it displays right away, instead of when the second F8 is sent
			Do
				EMReadScreen MAXIS_case_number, 8, MAXIS_row, 6		'Reading case number
			''	EMReadScreen client_name, 21, MAXIS_row, 16		'Reading client name
				EMReadScreen magi_comp, 3, MAXIS_row, 55		'Reading application date
				EMReadScreen HC_status, 1, MAXIS_row, 49		'Reading SNAP status
				EMReadScreen exempt_check, 1, MAXIS_row, 51 'checking for paperless criteria'

				'Doing this because sometimes BlueZone registers a "ghost" of previous data when the script runs. This checks against an array and stops if we've seen this one before.
				If trim(MAXIS_case_number) <> "" and instr(all_case_numbers_array, MAXIS_case_number) <> 0 then exit do
				all_case_numbers_array = trim(all_case_numbers_array & " " & MAXIS_case_number)

				If MAXIS_case_number = "        " then exit do			'Exits if we reach the end

				'Using if...thens to decide if a case should be added (status isn't blank or inactive and respective box is checked)

				If HC_status = "A" and magi_comp <> "ALL" and exempt_check <> "*" and exempt_check <> "+" then
					redim preserve HC_active_array(HC_count)
					set HC_active_array(HC_count) = new case_attributes
					HC_active_array(HC_count).case_number = MAXIS_case_number
					HC_active_array(HC_count).magi_comp = magi_comp
				''	msgbox sa_count & " " & SNAP_active_array(sa_count).case_number & " " & ubound(SNAP_active_array)
					HC_active_array(HC_count).HC_status = HC_status
					HC_active_array(HC_count).worker = worker
					HC_count = HC_count+1
				END IF


				MAXIS_row = MAXIS_row + 1
				add_case_info_to_Excel = ""	'Blanking out variable
				MAXIS_case_number = ""			'Blanking out variable
				STATS_counter = STATS_counter + 1                      'adds one instance to the stats counter
			Loop until MAXIS_row = 19
			PF8
		Loop until last_page_check = "THIS IS THE LAST PAGE"
	End if
NEXT


'''''''''''''''''''OPEN EXCEL HERE
'Opening the Excel file
Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objWorkbook = objExcel.Workbooks.Add()
objExcel.DisplayAlerts = True

'Setting the first 4 col as worker, case number, name, and APPL date
ObjExcel.Cells(1, 1).Value = "WORKER"
objExcel.Cells(1, 1).Font.Bold = TRUE
ObjExcel.Cells(1, 2).Value = "CASE NUMBER"
objExcel.Cells(1, 2).Font.Bold = TRUE
ObjExcel.Cells(1, 3).Value = "REVW DATE"
objExcel.Cells(1, 3).Font.Bold = TRUE

''
IF HC_count > 0 THEN


	'DO
	For n = 0 to ubound(HC_active_array) 'loop through every active HC case
		'dim hh_member_array(0)
		write_to_excel = false
		memb = 1
		hh_member_array = 0
		'Make sure in correct footer month, sometimes we drop back a month
		'MAXIS_footer_month = "04" 'datepart("m", date)
		'IF len(MAXIS_footer_month) = 1 then MAXIS_footer_month = "0" & MAXIS_footer_month
		'MAXIS_footer_year = right(datepart("YYYY", date), 2)
		MAXIS_case_number = HC_active_array(n).case_number
		call navigate_to_MAXIS_screen ("ELIG", "HC")
		'This section reads through all rows of HHMM to check for programs with asset test'
		'DO
		asset_test = false 'reset variable
		For member_row = 8 to 19
			EMReadScreen total_versions, 1, member_row, 65
		''	msgbox member_row
			IF isnumeric(total_versions) = true THEN
				total_versions = right(total_versions, 1)
				for version = total_versions to 1
					If len(version) = 1 then version = "0" & version
					EMReadScreen approved_status, 3, member_row, 68
					IF approved_status = "APP" THEN exit for
					EMWriteScreen version, member_row, 58
					transmit
				NEXT
				EMReadScreen program, 2, member_row, 28
				EMReadScreen new_member, 2, member_row, 3
				IF new_member <> "  " THEN hh_member = new_member
				If program = "MA" THEN 'We need to go into the span to check ELIG type for MA'
					IF approved_status = "APP" THEN
						EMWriteScreen "x", member_row, 26
						transmit
						EMReadScreen autoclose_check, 4, 8, 39
						IF autoclose_check <> "Auto" THEN
							EMReadScreen process_date, 8, 2, 73
							IF process_date = "        " THEN process_date = date
							IF datepart("m", process_date) = datepart("m", (dateadd("m", -1, date))) THEN
								EMReadScreen method, 1, 13, 21
								IF method = "B" or method = "S" then asset_test = true
								IF method = "L" then
									EMReadScreen ELIG_type, 2, 12, 17
									IF ELIG_type <> "AX" and ELIG_type <> "AA" THEN asset_test = true
								END IF
								'IF method = "L" then HC_active_array(n).special_case_type = "LTC"
								'IF method = "S" then HC_active_array(n).special_case_type = "EW"
								'EMReadScreen waiver_type, 1, 14, 21
								'IF  waiver_type = "J" or waiver_type = "K" THEN HC_active_array(n).special_case_type = "EW"

							''	IF waiver_type = "R" or waiver_type = "S" THEN HC_active_array(n).special_case_type = "DD"
							''	IF waiver_type = "F" or waiver_type = "G" THEN HC_active_array(n).special_case_type = "CADI"
								'Check spendown'
								'msgbox MAXIS_footer_month & "/01/" & MAXIS_footer_year
								IF cdate(MAXIS_footer_month & "/01/" & MAXIS_footer_year) > #5/31/17# THEN
										IF method = "X" and isnumeric(ELIG_type) =  false THEN 'cases meeting these crteria now need FIAT'
									 	write_to_excel = true
										panel_found = "METHOD X"
									END IF
								ELSE
										IF method = "X" THen asset_test = false

								END IF
								'END IF
								IF asset_test = true THEN 'Add any members with an asset test into the member array'
									redim hh_member_array(memb)
									hh_member_array(memb) = hh_member
									memb = memb + 1
								END If
							END If
						END IF
						PF3
					END If
				END IF
				IF asset_test = false and approved_status = "APP" then 'We need to check process_date only if we haven't already determined from MA
					IF program = "QM" or program = "SL" or program = "DQ" or program = "QI" THEN
						EMWriteScreen "x", member_row, 26
						transmit
						EMReadScreen autoclose_check, 4, 8, 39
						IF autoclose_check <> "Auto" THEN
							EMReadScreen process_date, 8, 2, 73
							IF datepart("m", process_date) = datepart("m", (dateadd("m", -1, date))) THEN
								transmit
								transmit
								'read the next renewal type, we don't care about 6 month renewals
								EMReadScreen next_renewal_type, 7, 13, 3
								IF next_renewal_type <> "6 Month" THEN asset_test = true
								EMReadScreen twelve_month_date, 8, 11, 34
								twelve_month_date = replace(twelve_month_date, " ", "/")
								IF datediff("m", date, twelve_month_date) > 9 THEN	asset_test = true
								IF asset_test = true THEN 'Add any members with an asset test into the member array'
									redim hh_member_array(memb)
									hh_member_array(memb) = hh_member
									memb = memb + 1
								END If
								'msgbox datediff("m", date, twelve_month_date)
							END IF
						END IF
						PF3
						process_date = ""
					END If
				END IF
				'IF asset_test = true then exit for 'remove thsi? We wan't to check all members to see who has assets
			END IF

		NEXT 'move to next line of elig screen'

		'row = row + 1
	'LOOP UNTIL row =  20
	'Eliminate the minors, no assets for them

	If asset_test = true THEN
	'first, go to review and get the received date
	call navigate_to_MAXIS_screen("STAT", "REVW")
	EMWriteScreen "X", 5, 71
	transmit
	EMReadScreen received_date, 8, 6, 27
	received_date = cdate(replace(received_date, " ", "/"))

	call navigate_to_MAXIS_screen("STAT", "MEMB")
	hh_adult_array = ""
	'msgbox ubound(hh_member_array)
	For each goat in hh_member_array
		IF goat <> "01" THEN
		EMWriteScreen goat, 20, 76
		transmit
		END IF
		EMReadScreen member_age, 2, 8, 76
		IF isnumeric(member_age) = true THEN
		 	if member_age > 20 THEN
				IF hh_adult_array = "" THEN hh_adult_array = goat
				IF hh_adult_array <> "" then hh_adult_array = hh_adult_array & "|" & goat
			END If
		END If
	Next
	hh_adult_array = SPLIT(hh_adult_array, "|")
	'msgbox hh_adult_array(1)
	call navigate_to_MAXIS_screen("STAT", "ACCT")
	for each member in hh_adult_array
		IF member <> "01" THEN
			EMWriteScreen member, 20, 79
			transmit
		END If
		EMReadScreen total_panels, 2, 2, 78
		IF isnumeric(total_panels) = true THEN 'THis prevents trying to go into PRIV cases'
		IF total_panels <> "0 " THEN
			For panel = 1 to total_panels
				IF len(panel) = 1 THEN panel = "0" & panel
				IF panel <> "01" THEN
					EMWriteScreen panel, 20, 79
					transmit
				END IF
				EMReadScreen update_date, 8, 11, 44
				IF left(update_date, 2) = "__" or left(update_date, 2) = "  " Then update_date = "01 01 01" 'This prevents errors when the date is blank'
				update_date = replace(update_date, " ", "/")
			''	msgbox received_date & " " & update_date
'msgbox datediff("d", received_date, update_date)
				IF datediff("d", update_date, received_date) > 35 THEN
					panel_found = "ACCT"
					write_to_excel = true
				exit For
				END IF
			NEXT
		END IF
		END IF
	NEXT
		call navigate_to_MAXIS_screen("STAT", "SECU")
		for each hh_member in hh_adult_array
			IF hh_member <> "01" THEN
				EMWriteScreen hh_member, 20, 79
				transmit
			END If
			EMReadScreen total_panels, 2, 2, 78
			IF total_panels <> "0 " THEN
				For panel = 1 to total_panels
					IF len(panel) = 1 THEN panel = "0" & panel
					IF panel <> "01" THEN
						EMWriteScreen panel, 20, 79
						transmit
					END IF
					EMReadScreen count_code, 1, 15, 64
					IF count_code = "Y" THEN 'Only panels coded as counted need to be reverified'
						EMReadScreen update_date, 8, 11, 35
						IF left(update_date, 2) = "__" or left(update_date, 2) = "  " Then update_date = "01 01 01" 'This prevents errors when the date is blank'
						update_date = replace(update_date, " ", "/")
						IF datediff("d", update_date, received_date) > 35 THEN 'If update is more than 75 days before review, incorrect.
							panel_found = "SECU"
							write_to_excel = true
							exit For
						END IF
					END IF
			  NEXT
			END IF
		NEXT
			call navigate_to_MAXIS_screen("STAT", "OTHR")
			for each chicken in hh_adult_array
				IF chicken <> "01" THEN
					EMWriteScreen chicken, 20, 79
					transmit
				END If
				EMReadScreen total_panels, 2, 2, 78
				IF total_panels <> "0 " THEN
					For panel = 1 to total_panels
						IF len(panel) = 1 THEN panel = "0" & panel
						IF panel <> "01" THEN
							EMWriteScreen panel, 20, 79
							transmit
						END IF
						EMReadScreen count_code, 1, 15, 64
						IF count_code = "Y" THEN 'only check panels that are counted'
							EMReadScreen update_date, 8, 10, 39
							IF left(update_date, 2) = "__" or left(update_date, 2) = "  " Then update_date = "01 01 01" 'This prevents errors when the date is blank'
								update_date = replace(update_date, " ", "/")
							IF datediff("d", update_date, received_date) > 35 THEN
								panel_found = "OTHR"
								write_to_excel = true
								exit For
							END IF
						END If
					NEXT
				END IF
			NEXT
			if write_to_excel = true THEN
				'msgbox "We're writing this one!"
				objexcel.cells(excel_row, 1).value = HC_active_array(n).worker
				objexcel.cells(excel_row, 2).value = HC_active_array(n).case_number
				objexcel.cells(excel_row, 3).value = datediff("d", update_date, received_date)
				objexcel.cells(excel_row, 4).value = panel_found
				excel_row = excel_row + 1
			END IF
	END IF
	NEXT
END IF
objexcel.cells(1, 5).value = "total sampled: " & ubound(HC_active_array)
script_end_procedure("Done")
